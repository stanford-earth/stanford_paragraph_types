<?php

/**
 * @file
 * Stanford Paragraph Types Defaults.
 */

/**
 * Implements hook_features_api().
 */
function stanford_paragraphs_defaults_features_api() {
  return array(
    'paragraphs_defaults' => array(
      'default_hook' => 'paragraphs_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'stanford_paragraphs_defaults') . '/stanford_paragraphs_defaults.features.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function stanford_paragraphs_defaults_permission() {
  return array(
    'administer stanford paragraph types defaults' => array(
      'title' => t('Administer Paragraph Types Defaults'),
      'description' => t('Create and modify default paragraph items.'),
    ),
  );
}

/**
 * Implements hook_entity_load().
 */
function stanford_paragraphs_defaults_entity_load($entities, $type) {
  if ($type == 'paragraphs_item') {
    foreach ($entities as &$entity) {
      list($entity_id, , $bundle) = entity_extract_ids($type, $entity);
      $exists = db_select('stanford_paragraphs_defaults', 's')
        ->fields('s')
        ->condition('item_ids', "%:$entity_id;%", 'LIKE')
        ->execute()
        ->rowCount();

      // We only care about the paragraph entities in the defaults.
      if ($exists) {
        stanford_paragraphs_defaults_clean_entity($entity, $type, $bundle);
      }
    }
  }
}

/**
 * Make sure field collection fields are properly formatted.
 *
 * @param object $entity
 *   Object to clean.
 * @param string $type
 *   Type of the entity.
 * @param string $bundle
 *   Bundle of the entity.
 */
function stanford_paragraphs_defaults_clean_entity(&$entity, $type, $bundle) {
  $fields = field_read_fields(array(
    'type' => 'field_collection',
    'entity_type' => $type,
    'bundle' => $bundle,
  ));
  foreach (array_keys($fields) as $field_name) {
    if (!empty($entity->{$field_name})) {
      foreach ($entity->{$field_name}[LANGUAGE_NONE] as $delta => &$value) {
        if (is_object($value)) {
          list($value, $revision_id,) = entity_extract_ids('field_collection_item', $value);
          $value = array('value' => $value, 'revision_id' => $revision_id);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function stanford_paragraphs_defaults_entity_delete($entity, $type) {
  if ($type == 'paragraphs_item') {
    $item_id = $entity->item_id;

    $query = db_select('stanford_paragraphs_defaults', 's')
      ->fields('s', array('uid', 'item_ids'))
      ->condition('item_ids', "%:$item_id;%", 'LIKE')
      ->execute()
      ->fetchAllKeyed();

    foreach ($query as $uid => $item_ids) {

      $default_items = unserialize($item_ids);
      unset($default_items[$item_id]);

      // If only one of the paragraph items was deleted.
      if ($default_items) {
        db_update('stanford_paragraphs_defaults')
          ->fields(array('item_ids' => serialize($default_items)))
          ->condition('uid', $uid)
          ->execute();
      }
      else {
        // If all paragraph items were deleted.
        db_delete('stanford_paragraphs_defaults')
          ->condition('uid', $uid)->execute();
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function stanford_paragraphs_defaults_menu() {
  $items = array();
  $items['admin/structure/paragraphs/stanford-defaults'] = array(
    'title' => 'Defaults',
    'page callback' => 'stanford_paragraphs_defaults_overview',
    'file' => 'stanford_paragraphs_defaults.forms.inc',
    'access arguments' => array('administer stanford paragraph types defaults'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );
  $items['admin/structure/paragraphs/stanford-defaults/overview'] = array(
    'title' => 'Defaults',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/paragraphs/stanford-defaults/add/%/%/%'] = array(
    'title' => 'Add Default',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_paragraphs_defaults_add', 5, 6, 7),
    'file' => 'stanford_paragraphs_defaults.forms.inc',
    'access arguments' => array('administer stanford paragraph types defaults'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/paragraphs/stanford-defaults/edit/%stanford_paragraphs_defaults'] = array(
    'title' => 'Edit Default',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_paragraphs_defaults_edit', 5),
    'file' => 'stanford_paragraphs_defaults.forms.inc',
    'access arguments' => array('administer stanford paragraph types defaults'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/paragraphs/stanford-defaults/delete/%stanford_paragraphs_defaults'] = array(
    'title' => 'Delete Default',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_paragraphs_defaults_delete', 5),
    'file' => 'stanford_paragraphs_defaults.forms.inc',
    'access arguments' => array('administer stanford paragraph types defaults'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Delete the desired default configuration.
 *
 * @param string $uid
 *   The unique uid of the item to delete.
 */
function stanford_paragraphs_defaults_delete_default($uid) {
  $default = &drupal_static(__FUNCTION__);
  // Prevent this from running multiple times.
  if (!is_null($default)) {
    return;
  }

  $default = stanford_paragraphs_defaults_load($uid);
  if ($default) {
    entity_delete_multiple('paragraphs_item', array_keys($default['item_ids']));
  }
}

/**
 * Load a single default configuration by uid.
 *
 * @param string $uid
 *   UID to load.
 *
 * @return array|bool
 *   Keyed array of the requested default or false if none exists.
 */
function stanford_paragraphs_defaults_load($uid) {
  if ($default = stanford_paragraphs_defaults_load_multiple(array($uid))) {
    return $default[$uid];
  }
  return FALSE;
}

/**
 * Loads multiple default configurations by requested UID.
 *
 * @param array|null $uids
 *   UIDs to load.
 * @param string $entity_type
 *   Entity type to load defaults.
 * @param string $bundle
 *   Entity bundle to load defaults.
 * @param string $field_name
 *   Entity field to load defaults.
 *
 * @return array
 *   An associative array with all available defaults.
 */
function stanford_paragraphs_defaults_load_multiple($uids = NULL, $entity_type = NULL, $bundle = NULL, $field_name = NULL) {
  $query = db_select('stanford_paragraphs_defaults', 's')
    ->fields('s');

  // Add any conditions passed in.
  if ($uids) {
    $query->condition('uid', $uids, 'IN');
  }
  if ($entity_type) {
    $query->condition('entity_type', $entity_type);
  }
  if ($bundle) {
    $query->condition('bundle', $bundle);
  }
  if ($field_name) {
    $query->condition('field_name', $field_name);
  }
  $results = $query->execute();

  $defaults = array();
  while ($default_item = $results->fetchAssoc()) {
    $item_ids = unserialize($default_item['item_ids']);
    $default_item['item_ids'] = $item_ids;

    // Sort paragraph items based on weight before loading.
    asort($item_ids);
    $paragraphs = paragraphs_item_load_multiple(array_keys($item_ids));
    $default_item['paragraphs'] = $paragraphs;

    $defaults[$default_item['uid']] = $default_item;
  }
  return $defaults;
}

/**
 * Implements hook_field_attach_form().
 */
function stanford_paragraphs_defaults_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $uid = _stanford_paragraphs_defaults_get_form_uid($entity_type, $form['#bundle'], $form_state);

  // Load a desired default configuration.
  if ($uid) {
    _stanford_paragraphs_defaults_attach_default($form, $form_state, $uid);
  }

  $paragraphs_fields = field_read_fields(array(
    'type' => 'paragraphs',
    'entity_type' => $entity_type,
    'bundle' => $form['#bundle'],
  ));

  foreach (array_keys($paragraphs_fields) as $field_name) {
    $defaults = stanford_paragraphs_defaults_load_multiple(NULL, $entity_type, $form['#bundle'], $field_name);
    $state = field_form_get_state(array(), $field_name, LANGUAGE_NONE, $form_state);

    // Skip this field if its already populated, if the default config was
    // already loaded, or if no defaults are configured.
    if ($state['items_count'] ||
      !$defaults ||
      !isset($form[$field_name]) ||
      (strpos($uid, $field_name) !== FALSE)
    ) {
      continue;
    }

    // Attach the buttons.
    $form[$field_name][LANGUAGE_NONE]['defaults'] = array(
      '#type' => 'fieldset',
      '#title' => t('Start with a default layout'),
      '#weight' => -99,
      '#bundle' => NULL,
    );
    foreach ($defaults as $uid => $default) {
      $form[$field_name][LANGUAGE_NONE]['defaults'][$uid] = array(
        '#type' => 'submit',
        '#value' => $default['label'],
        '#name' => $uid,
        '#submit' => array('stanford_paragraphs_defaults_build_default'),
        '#limit_validation_errors' => array(),
        '#bundle' => NULL,
      );
    }
  }
}

/**
 * Obtain the defaults uid from either $_GET or the form_state value.
 *
 * @param string $entity_type
 *   Entity type of the form.
 * @param string $entity_bundle
 *   Entity bundle of the form.
 * @param array $form_state
 *   Form values.
 *
 * @return string
 *   The uid to load.
 */
function _stanford_paragraphs_defaults_get_form_uid($entity_type, $entity_bundle, array $form_state) {
  $uid = '';
  $get = drupal_get_query_parameters($_GET);
  if (isset($get['layout'])) {
    $layout = check_plain($get['layout']);
    $uid = "$entity_type-$entity_bundle-$layout";
  }

  if (isset($form_state['load_default'])) {
    $uid = $form_state['load_default'];
  }
  return $uid;
}

/**
 * Attach the default paragraph configuration.
 *
 * @param array $form
 *   Drupal_get_form form array.
 * @param array $form_state
 *   Drupal_get_form form_state array.
 * @param string $uid
 *   Uid of the default configuration to load.
 */
function _stanford_paragraphs_defaults_attach_default(array &$form, array &$form_state, $uid) {
  // Prevent loading the default over and over and over...
  $loaded = &drupal_static(__FUNCTION__);

  $default = stanford_paragraphs_defaults_load($uid);
  $field_name = $default['field_name'];
  $entity_type = $default['entity_type'];

  // Make sure the field exists on the form.
  if ($loaded || !$default || !isset($form[$field_name])) {
    return;
  }

  $entity = isset($form['#node']) ? $form['#node'] : $form['#entity'];
  $info = entity_get_info($entity_type);
  // Make sure the bundle key is set.
  // @see entity_extract_ids().
  if (!empty($info['entity keys']['bundle']) && !isset($entity->{$info['entity keys']['bundle']})) {
    $entity->{$info['entity keys']['bundle']} = $default['bundle'];
  }

  // Get field and instance from form state if its there.
  // This is mostly a tiny performance improvement.
  if (isset($form_state['field'][$field_name])) {
    $field = $form_state['field'][$field_name][LANGUAGE_NONE]['field'];
    $instance = $form_state['field'][$field_name][LANGUAGE_NONE]['instance'];
  }
  else {
    $field = field_info_field($field_name);
    $instance = field_info_instance($entity_type, $field_name, $default['bundle']);
  }

  // Reset the paragraph field.
  unset($form[$field_name]);
  unset($form_state['field'][$field_name]);

  // Order any existing paragraphs in a form we can use to set the
  // default value.
  $items = array();
  foreach ($default['paragraphs'] as $paragraphs_item) {
    $cloned_item = stanford_pragraphs_defaults_replicate_entity('paragraphs_item', $paragraphs_item);
    $cloned_item->item_id = NULL;
    $cloned_item->revision_id = NULL;
    $items[]['entity'] = $cloned_item;
  }

  // Add new field to the form.
  $paragraphs_field = field_default_form($entity_type, $entity, $field, $instance, LANGUAGE_NONE, $items, $form, $form_state);
  $form += (array) $paragraphs_field;

  // Change form state with new item count.
  $field_form_state = &$form_state['field'][$field_name][LANGUAGE_NONE];
  $field_form_state['items_count'] = $field_form_state['real_items_count'] = count($items);
  $field_form_state['field'] = $field;

  $loaded = TRUE;
}

/**
 * Default button submit handler.
 *
 * Rebuild the form with the form_state changed to indicate which default to
 * load.
 */
function stanford_paragraphs_defaults_build_default(&$form, &$form_state) {
  $form_state['load_default'] = $form_state['triggering_element']['#name'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_cron().
 */
function stanford_paragraphs_defaults_cron() {
  // Periodically prune the defaults configuration if the entity type/bundle
  // is removed.
  $defaults = stanford_paragraphs_defaults_load_multiple();
  foreach ($defaults as $default) {
    $entity_info = entity_get_info($default['entity_type']);
    if (!$entity_info || !isset($entity_info['bundles'][$default['bundle']])) {
      entity_delete('paragraphs_item', array_keys($default['item_ids']));
    }
  }
}

/**
 * Replicate the entity passed in argument.
 *
 * This function does not save the replicated entity. Taken from replicate
 * contrib module.
 *
 * @param string $entity_type
 *   The entity type.
 * @param object $entity
 *   The entity to replicate.
 *
 * @return object
 *   A new replicated entity.
 *
 * @see https://www.drupal.org/project/replicate
 */
function stanford_pragraphs_defaults_replicate_entity($entity_type, $entity) {
  $clone = clone $entity;

  if ($clone) {
    // Let other modules manage the cleaning of the entity.
    foreach (module_implements('replicate_entity_' . $entity_type) as $module) {
      $function = $module . '_replicate_entity_' . $entity_type;
      $function($clone);
    }

    // Set the entity as new entity.
    $clone->is_new = TRUE;

    // Let other modules do special actions on each field.
    stanford_pragraphs_defaults_replicate_fields($clone, $entity_type);

    // Let other modules do special actions on the global entity.
    drupal_alter('replicate_entity', $clone, $entity_type, $entity);
  }

  return $clone;
}

/**
 * Replicate the fields of an entity.
 *
 * Taken from replicate contrib module.
 *
 * @param object $entity
 *   The entity for which to clone the fields.
 * @param string $entity_type
 *   The entity type.
 *
 * @see https://www.drupal.org/project/replicate
 */
function stanford_pragraphs_defaults_replicate_fields(&$entity, $entity_type) {
  foreach (field_info_fields() as $field_name => $field) {
    if (isset($entity->$field_name)) {
      // Here call hook functions. Doesn't use module_invoke because we
      // want to pass the clone by reference.
      foreach (module_implements('replicate_field_' . $field['type']) as $module) {
        $function = $module . '_replicate_field_' . $field['type'];
        $function($entity, $entity_type, $field_name);
      }
    }
  }
}
